{"version":3,"file":"RsyncTracker.js","sourceRoot":"","sources":["../../src/RsyncTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import pkg from '../package.json';\n\nimport * as childProcess from 'child_process';\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as winston from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport { format } from 'logform';\nimport * as yaml from 'js-yaml';\n\nimport Registry from './ioc/Registry';\n\nimport BackupPathBuilder from './backup/BackupPathBuilder';\nimport ConfigurationLoader from './config/ConfigurationLoader';\nimport Logger from './logging/Logger';\nimport TaskEngine from './task/TaskEngine';\n\nimport DateUtils from './utils/DateUtils';\nimport DigestUtils from './utils/DigestUtils';\nimport EnvUtils from './utils/EnvUtils';\nimport FileUtils from './utils/FileUtils';\nimport NameUtils from './utils/NameUtils';\nimport PathUtils from './utils/PathUtils';\n\nfunction prepareLoggers(): winston.Logger[] {\n  const dailyTransport = new DailyRotateFile({\n    dirname: Registry.get('logDir'),\n    filename: 'rsync-tracker-%DATE%.log',\n    datePattern: 'YYYY-MM-DD-HH',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d'\n  });\n\n  const loggers: winston.Logger[] = [];\n\n  const simpleFormat =\n    format.printf(info => `${info.timestamp} ${info.level}: ${info.message}`);\n\n  loggers.push(winston.createLogger({\n    format: format.combine(format.timestamp(), simpleFormat),\n    transports: [ dailyTransport ]\n  }));\n\n  if (Registry.get('consoleLogs')) {\n    loggers.push(winston.createLogger({\n      format: format.combine(format.colorize(), format.timestamp(), simpleFormat),\n      transports: [ new winston.transports.Console() ]\n    }));\n  }\n\n  return loggers;\n}\n\nexport default class RsyncTracker {\n  static version: string = (pkg as any).version;\n\n  static main() {\n    const envUtils = new EnvUtils();\n\n    Registry.registerIfNotExist('childProcess', childProcess);\n    Registry.registerIfNotExist('crypto', crypto);\n    Registry.registerIfNotExist('fs', fs);\n    Registry.registerIfNotExist('path', path);\n    Registry.registerIfNotExist('os', os);\n\n    Registry.registerIfNotExist('yaml', yaml);\n\n    const fileUtils = new FileUtils();\n\n    Registry.register('baseDir', envUtils.val('RT_BASE_DIR', fileUtils.resolve('~/.rsync-tracker')));\n    Registry.register('backupDir', envUtils.val('RT_BCK_DIR', `${Registry.get('baseDir')}/bck`.replace('//', '/')));\n    Registry.register('logDir', envUtils.val('RT_LOGS_DIR', fileUtils.resolve('~/Library/Logs/rsync-tracker')));\n    Registry.register('consoleLogs', envUtils.val('RT_LOGS_TO_CONSOLE', false));\n\n    Registry.register('rsyncBin', envUtils.val('RT_BIN_RSYNC', '/usr/bin/rsync'));\n    Registry.register('sshBin', envUtils.val('RT_BIN_SSH', '/usr/bin/ssh'));\n\n    Registry.registerIfNotExist('loggers', prepareLoggers());\n    Registry.registerIfNotExist('logger', new Logger());\n\n    Registry.registerIfNotExist('dateUtils', new DateUtils());\n    Registry.registerIfNotExist('digestUtils', new DigestUtils('sha1', 'hex'));\n    Registry.registerIfNotExist('fileUtils', fileUtils);\n    Registry.registerIfNotExist('nameUtils', new NameUtils());\n    Registry.registerIfNotExist('pathUtils', new PathUtils());\n\n    Registry.registerIfNotExist('backupPathBuilder', new BackupPathBuilder());\n\n    const loader = new ConfigurationLoader();\n    const config = loader.load();\n    console.log(config);\n    const taskEngine = new TaskEngine(config);\n\n    // taskEngine.process();\n  }\n}\n"]}