{"version":3,"file":"BackupStateBuilder.js","sourceRoot":"","sources":["../../../src/backup/BackupStateBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2DAAmC;AAKnC,gEAAwC;AAExC;IAgBE,KAAK,CAAC,MAA4B;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAElF,OAAO,IAAI,qBAAW,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,EAAE,YAAY,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,CAAC,KAAkB;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;IAEO,kBAAkB,CAAC,IAAY;QACrC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,SAAS,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SAC1D;aAAM;YACL,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAEhD,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aACzE;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,SAAS,CAAC,IAAY;QAC5B,OAAO,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9D,CAAC;IAEO,cAAc,CAAC,OAAe;QACpC,OAAO,GAAG,OAAO,OAAO,CAAC;IAC3B,CAAC;CACF;AAnDC;IADC,gBAAM,EAAE;qDACkB;AAG3B;IADC,gBAAM,EAAE;qDACqB;AAG9B;IADC,gBAAM,EAAE;qDACqB;AAG9B;IADC,gBAAM,EAAE;uDACyB;AAGlC;IADC,gBAAM,EAAE;8CACO;AAdlB,qCAqDC","sourcesContent":["import Inject from '../ioc/Inject';\nimport TrackerConfiguration from '../config/TrackerConfiguration';\nimport DateUtils from '../utils/DateUtils';\nimport DigestUtils from '../utils/DigestUtils';\nimport PathUtils from '../utils/PathUtils';\nimport BackupState from './BackupState';\n\nexport default class BackupStateBuilder {\n  @Inject()\n  private backupDir!: string;\n\n  @Inject()\n  private dateUtils!: DateUtils;\n\n  @Inject()\n  private pathUtils!: PathUtils;\n\n  @Inject()\n  private digestUtils!: DigestUtils;\n\n  @Inject()\n  private fs: any;\n\n  build(config: TrackerConfiguration): BackupState {\n    const nextPath = this.pathUtils.pathFromDate(this.dateUtils.now());\n    const previousPath = this.previousBackupPath(config.name);\n    const unconflictedNextPath = this.pathUtils.avoidConflict(previousPath, nextPath);\n\n    return new BackupState(config.name, unconflictedNextPath, previousPath);\n  }\n\n  update(state: BackupState) {\n    const lastFile = this.pathToLastFile(this.digestDir(state.name));\n    this.fs.writeFileSync(lastFile, state.next, 'utf8');\n  }\n\n  private previousBackupPath(name: string): string | undefined {\n    const digestDir = this.digestDir(name);\n\n    if (!this.fs.existsSync(digestDir)) {\n      this.fs.mkdirSync(digestDir);\n      this.fs.writeFileSync(`${digestDir}/name`, name, 'utf8');\n    } else {\n      const previous = this.pathToLastFile(digestDir);\n\n      if (this.fs.existsSync(previous)) {\n        return this.fs.readFileSync(previous, 'utf8').replace(/^\\s+|\\s+$/g, '');\n      }\n    }\n\n    return undefined;\n  }\n\n  private digestDir(name: string): string {\n    return `${this.backupDir}/${this.digestUtils.digest(name)}`;\n  }\n\n  private pathToLastFile(baseDir: string) {\n    return `${baseDir}/last`;\n  }\n}\n"]}