{"version":3,"file":"SyncTaskBuilder.js","sourceRoot":"","sources":["../../../src/task/SyncTaskBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,qEAAyD;AAEzD,2DAAmC;AACnC,gEAAwC;AACxC,4DAAoC;AACpC,8DAAsC;AACtC,wDAAgC;AAIhC;IAIE,KAAK,CAAC,MAA4B;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE1D,MAAM,KAAK,GAAe,EAAE,CAAC;QAE7B,IAAI,MAAM,CAAC,gBAAgB,EAAE,EAAE;YAC7B,IAAI,MAAM,CAAC,KAAK,EAAE,EAAE;gBAClB,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvE,KAAK,CAAC,IAAI,CAAC,IAAI,iBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC;aAC/D;iBAAM;gBACL,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;gBACzE,KAAK,CAAC,IAAI,CAAC,IAAI,oBAAU,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC;aAChD;SACF;QAED,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,KAAK,8BAAS,CAAC,MAAM,EAAE;YAChD,KAAK,CAAC,IAAI,CAAC,IAAI,mBAAS,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;YAE3D,KAAK,CAAC,IAAI,CAAC,IAAI,qBAAW,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAC5C,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;SACjC;aAAM;YACL,KAAK,CAAC,IAAI,CAAC,IAAI,mBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;SAC/C;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA9BC;IADC,gBAAM,EAAE;2DACuC;AAFlD,kCAgCC","sourcesContent":["import BackupStateBuilder from '../backup/BackupStateBuilder';\nimport { RsyncMode } from '../config/RsyncConfiguration';\nimport TrackerConfiguration from '../config/TrackerConfiguration';\nimport Inject from '../ioc/Inject';\nimport ClojureTask from './ClojureTask';\nimport RsyncTask from './RsyncTask';\nimport SimpleTask from './SimpleTask';\nimport SshTask from './SshTask';\nimport Taskable from './Taskable';\nimport TaskBuilder from './TaskBuilder';\n\nexport default class SyncTaskBuilder implements TaskBuilder {\n  @Inject()\n  private backupStateBuilder!: BackupStateBuilder;\n\n  build(config: TrackerConfiguration): Taskable[] {\n    const backupState = this.backupStateBuilder.build(config);\n\n    const tasks: Taskable[] = [];\n\n    if (config.shouldCreateDest()) {\n      if (config.isSsh()) {\n        const dest = config.sshConfig.dest.replace('{dest}', backupState.next);\n        tasks.push(new SshTask(config.sshConfig, `mkdir -p ${dest}`));\n      } else {\n        const dest = config.rsyncConfig.dest.replace('{dest}', backupState.next);\n        tasks.push(new SimpleTask(`mkdir -p ${dest}`));\n      }\n    }\n\n    if (config.rsyncConfig.mode === RsyncMode.BACKUP) {\n      tasks.push(new RsyncTask(config.rsyncConfig, backupState));\n\n      tasks.push(new ClojureTask(() => {\n        this.backupStateBuilder.update(backupState);\n        return true;\n      }).runIfPreviousTaskFail(true));\n    } else {\n      tasks.push(new RsyncTask(config.rsyncConfig));\n    }\n\n    return tasks;\n  }\n}\n"]}