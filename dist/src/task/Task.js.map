{"version":3,"file":"Task.js","sourceRoot":"","sources":["../../../src/task/Task.ts"],"names":[],"mappings":";;AAGA;IAKE,YAAsB,QAAsB;QAFpC,2BAAsB,GAAY,KAAK,CAAC;QAG9C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,qBAAqB,CAAC,MAAe;QACnC,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;QACxB,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACrC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;CAGF;AAvBD,uBAuBC","sourcesContent":["import { TaskPriority } from '../queue/QueueTask';\nimport Taskable from './Taskable';\n\nexport default abstract class Task implements Taskable {\n  private readonly _priority: TaskPriority;\n\n  private _runIfPreviousTaskFail: boolean = false;\n\n  protected constructor(priority: TaskPriority) {\n    this._priority = priority;\n  }\n\n  runIfPreviousTaskFail(canRun: boolean): Task {\n    this._runIfPreviousTaskFail = canRun;\n    return this;\n  }\n\n  canRunIfPreviousTaskFailed(): boolean {\n    return this._runIfPreviousTaskFail;\n  }\n\n  priority(): TaskPriority {\n    return this._priority;\n  }\n\n  abstract run(): boolean;\n}\n"]}