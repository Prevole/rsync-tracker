{"version":3,"file":"PathUtils.js","sourceRoot":"","sources":["../../../src/utils/PathUtils.ts"],"names":[],"mappings":";;AAAA,aAAa,KAAa;IACxB,IAAI,WAAW,GAAG,GAAG,KAAK,EAAE,CAAC;IAC7B,OAAO,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;AACpE,CAAC;AAED;IACE,YAAY,CAAC,IAAU;QACrB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAChC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAElC,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACzD,CAAC;IAED,aAAa,CAAC,QAA4B,EAAE,IAAY;QACtD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,qBAAqB,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1D,MAAM,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAElD,IAAI,iBAAiB,KAAK,qBAAqB,EAAE;YAC/C,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;YAEzE,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC/B,UAAU,GAAG,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;aAC/C;YAED,OAAO,GAAG,IAAI,IAAI,UAAU,EAAE,CAAC;SAChC;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF;AA9BD,4BA8BC","sourcesContent":["function pad(value: number) {\n  let pathElement = `${value}`;\n  return pathElement.length === 1 ? `0${pathElement}` : pathElement;\n}\n\nexport default class PathUtils {\n  pathFromDate(date: Date): string {\n    const month = pad(date.getMonth() + 1);\n    const day = pad(date.getDate());\n    const hour = pad(date.getHours());\n\n    return `${date.getFullYear()}/${month}/${day}/${hour}`;\n  }\n\n  avoidConflict(previous: string | undefined, next: string) {\n    if (previous === undefined) {\n      return next;\n    }\n\n    const previousWithoutSuffix = previous.replace(/-.*/, '');\n    const nextWithoutSuffix = next.replace(/-.*/, '');\n\n    if (nextWithoutSuffix === previousWithoutSuffix) {\n      const previousSuffix = previous.replace(/(?:\\d+\\/?)+(?:-(\\d+))?/g, '$1');\n\n      let nextSuffix = 1;\n      if (previousSuffix.match(/\\d+/)) {\n        nextSuffix = parseInt(previousSuffix, 10) + 1;\n      }\n\n      return `${next}-${nextSuffix}`;\n    } else {\n      return next;\n    }\n  }\n}\n"]}